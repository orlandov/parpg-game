From fe80f4210406c92a955022b088b138b58d2044d5 Mon Sep 17 00:00:00 2001
From: Orlando Vazquez <ovazquez@gmail.com>
Date: Sat, 22 Aug 2009 12:26:23 -0700
Subject: [PATCH] Move user interface logic out of World and into the Hud class.


diff --git a/scripts/hud.py b/scripts/hud.py
index f75eaaa..e4ea39f 100644
--- a/scripts/hud.py
+++ b/scripts/hud.py
@@ -17,11 +17,12 @@
 
 import shutil, fife, pychan
 from pychan.tools import callbackWithArguments as cbwa
+from scripts.parpgfilebrowser import PARPGFileBrowser
+import weakref
 
-
-class Hud():
+class Hud(object):
     """Main Hud class"""
-    def __init__(self, engine, settings):
+    def __init__(self, engine, world, settings):
         """Initialise the instance.
            @type engine: fife.Engine
            @param engine: An instance of the fife engine
@@ -29,9 +30,12 @@ class Hud():
            @param settings: The settings data
            @return: None"""
         pychan.init(engine, debug = True)
+
         # TODO: perhaps this should not be hard-coded here
         self.hud = pychan.loadXML("gui/hud.xml")
+        self.engine = engine
         self.settings = settings
+        self.world = weakref.proxy(world)
         self.actionsBox = self.hud.findChild(name="actionsBox")
         self.actionsText = []
         self.menu_displayed = False
@@ -39,6 +43,7 @@ class Hud():
         self.initializeMainMenu()
         self.initializeOptionsMenu()
         self.initializeHelpMenu()
+        self.initializeEvents()
 
     def initializeHud(self):
         """Initialize and show the main HUD
@@ -229,6 +234,78 @@ class Hud():
 
         self.options_menu.mapEvents(self.options_events)
 
+    def saveGame(self):
+        """ Called when the user wants to save the game.
+            @return: None"""
+        save_browser = PARPGFileBrowser(self.engine,
+                                   self.world.saveFunction,
+                                   savefile=True,
+                                   guixmlpath="gui/savebrowser.xml",
+                                   extensions = ('.dat'))
+        save_browser.showBrowser()
+            
+    def newGame(self):
+        """Called when user request to start a new game.
+           @return: None"""
+        print 'new game'
+
+    def loadGame(self):
+        """ Called when the user wants to load a game.
+            @return: None"""
+        load_browser = PARPGFileBrowser(self.engine,
+                                   self.world.loadFunction,
+                                   savefile=False,
+                                   guixmlpath='gui/loadbrowser.xml',
+                                   extensions=('.dat'))
+        load_browser.showBrowser()
+
+    def quitGame(self):
+        """Called when user requests to quit game.
+           @return: None"""
+
+        window = pychan.widgets.Window(title=unicode("Quit?"))
+
+        hbox = pychan.widgets.HBox()
+        are_you_sure = "Are you sure you want to quit?"
+        label = pychan.widgets.Label(text=unicode(are_you_sure))
+        yes_button = pychan.widgets.Button(name="yes_button", 
+                                           text=unicode("Yes"))
+        no_button = pychan.widgets.Button(name="no_button",
+                                          text=unicode("No"))
+
+        window.addChild(label)
+        hbox.addChild(yes_button)
+        hbox.addChild(no_button)
+        window.addChild(hbox)
+
+        events_to_map = {"yes_button":self.world.quitFunction,
+                         "no_button":window.hide}
+        
+        window.mapEvents(events_to_map)
+        window.show()
+
+    def initializeEvents(self):
+        """Intialize Hud events
+           @return: None"""
+        events_to_map = {}
+        events_to_map["inventoryButton"] = cbwa(self.world.displayInventory, True)
+        events_to_map["saveButton"] = self.saveGame
+        events_to_map["loadButton"] = self.loadGame
+
+        hud_ready_buttons = ["hudReady1", "hudReady2", "hudReady3", "hudReady4"]
+
+        for item in hud_ready_buttons:
+            events_to_map[item] = cbwa(self.readyAction, item)
+
+        self.hud.mapEvents(events_to_map)
+
+        menu_events = {}
+        menu_events["newButton"] = self.newGame
+        menu_events["quitButton"] = self.quitGame
+        menu_events["saveButton"] = self.saveGame
+        menu_events["loadButton"] = self.loadGame
+        self.main_menu.mapEvents(menu_events)
+
     def updateVolumeText(self):
         """
         Update the initial volume label to reflect the value of the slider
diff --git a/scripts/world.py b/scripts/world.py
index 0d0463a..8afa008 100644
--- a/scripts/world.py
+++ b/scripts/world.py
@@ -18,7 +18,6 @@
 import fife, time
 import pychan
 from sounds import SoundEngine
-from scripts.parpgfilebrowser import PARPGFileBrowser
 from datetime import date
 from scripts.common.eventlistenerbase import EventListenerBase
 from settings import Setting
@@ -50,8 +49,8 @@ class World(EventListenerBase):
         # self.engine is a fife.Engine object, not an Engine object
         self.engine = engine
         self.eventmanager = engine.getEventManager()
-        self.quitFunction = None
         self.inventoryShown = False 
+        self.quitFunction = None
         
         # self.data is an engine.Engine object, but is set in run.py
         self.data = None
@@ -60,19 +59,8 @@ class World(EventListenerBase):
         # self.map is a Map object, set to none here
         self.activeMap = None
         self.maps = {}
-        self.hud = hud.Hud(self.engine, TDS)
-        self.hud.events_to_map["inventoryButton"] = cbwa(self.displayInventory, True)
-        self.hud.events_to_map["saveButton"] = self.saveGame
-        self.hud.events_to_map["loadButton"] = self.loadGame
-        hud_ready_buttons = ["hudReady1", "hudReady2", "hudReady3", "hudReady4"]
-        for item in hud_ready_buttons:
-            self.hud.events_to_map[item] = cbwa(self.hud.readyAction, item)
-        self.hud.hud.mapEvents(self.hud.events_to_map)
-        self.hud.menu_events["newButton"] = self.newGame
-        self.hud.menu_events["quitButton"] = self.quitGame
-        self.hud.menu_events["saveButton"] = self.saveGame
-        self.hud.menu_events["loadButton"] = self.loadGame
-        self.hud.main_menu.mapEvents(self.hud.menu_events)
+        self.hud = hud.Hud(self.engine, self, TDS)
+
         self.action_number = 1
         # setup the inventory
         # make slot 'A1' and 'A3' container daggers
@@ -95,6 +83,16 @@ class World(EventListenerBase):
             if(self.sounds.music_init == False):
                 self.sounds.playMusic("/music/preciouswasteland.ogg")
                 
+    def saveFunction(self, *args, **kwargs):
+        """Callback for save game
+           @return: None"""
+        self.data.save(*args, **kwargs)
+
+    def loadFunction(self, *args, **kwargs):
+        """Callback for load game
+           @return: None"""
+        self.data.load(*args, **kwargs)
+
     def loadMap(self, mapname, filename):
         """Loads a map an stores it under the given name in the maps list.
         """
@@ -176,7 +174,7 @@ class World(EventListenerBase):
 
         if(keyval == key.Q):
             # we need to quit the game
-            self.quitGame()
+            self.hud.quitGame()
         if(keyval == key.T):
             self.toggle_renderer('GridRenderer')
         if(keyval == key.F1):
@@ -283,58 +281,6 @@ class World(EventListenerBase):
             self.context_menu.vbox.hide()
             delattr(self, "context_menu")
 
-    def newGame(self):
-        """Called when user request to start a new game.
-           @return: None"""
-        print 'new game'
-
-    def quitGame(self):
-        """Called when user requests to quit game.
-           @return: None"""
-        if(self.quitFunction != None):
-            window = pychan.widgets.Window(title=unicode("Quit?"))
-
-            hbox = pychan.widgets.HBox()
-            are_you_sure = "Are you sure you want to quit?"
-            label = pychan.widgets.Label(text=unicode(are_you_sure))
-            yes_button = pychan.widgets.Button(name="yes_button", 
-                                               text=unicode("Yes"))
-            no_button = pychan.widgets.Button(name="no_button",
-                                              text=unicode("No"))
-
-            window.addChild(label)
-            hbox.addChild(yes_button)
-            hbox.addChild(no_button)
-            window.addChild(hbox)
-
-            events_to_map = {"yes_button":self.quitFunction,
-                             "no_button":window.hide}
-            
-            window.mapEvents(events_to_map)
-            window.show()
-
-    def saveGame(self):
-        """ Called when the user wants to save the game.
-            @return: None"""
-        self.save_browser = PARPGFileBrowser(self.engine,
-                                        self.data.save,
-                                        savefile=True,
-                                        guixmlpath="gui/savebrowser.xml",
-                                        extensions = ('.dat'))
-        self.save_browser.showBrowser()
-            
-
-    def loadGame(self):
-        """ Called when the user wants to load a game.
-            @return: None"""
-        self.load_browser = PARPGFileBrowser(self.engine,
-                                        self.data.load,
-                                        savefile=False,
-                                        guixmlpath='gui/loadbrowser.xml',
-                                        extensions=('.dat'))
-        self.load_browser.showBrowser()
-
-
     def createBoxGUI(self, title):
         """
         Creates a window to display the contents of a box
-- 
1.6.0.4

